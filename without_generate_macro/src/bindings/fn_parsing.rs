// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
#[derive(Clone)]
pub struct ParseFnSpec {
  pub project_dir: _rt::String,
}
impl ::core::fmt::Debug for ParseFnSpec {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("ParseFnSpec").field("project-dir", &self.project_dir).finish()
  }
}
#[derive(Clone)]
pub struct FnEntrypoint {
  pub path: _rt::String,
}
impl ::core::fmt::Debug for FnEntrypoint {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("FnEntrypoint").field("path", &self.path).finish()
  }
}
#[derive(Clone)]
pub struct ParseFnManifest {
  pub entrypoint: FnEntrypoint,
}
impl ::core::fmt::Debug for ParseFnManifest {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("ParseFnManifest").field("entrypoint", &self.entrypoint).finish()
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_parse_fn_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg1;
let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
let result1 = T::parse_fn(ParseFnSpec{
  project_dir: _rt::string_lift(bytes0),
});
let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
let ParseFnManifest{ entrypoint:entrypoint3, } = result1;
let FnEntrypoint{ path:path4, } = entrypoint3;
let vec5 = (path4.into_bytes()).into_boxed_slice();
let ptr5 = vec5.as_ptr().cast::<u8>();
let len5 = vec5.len();
::core::mem::forget(vec5);
*ptr2.add(4).cast::<usize>() = len5;
*ptr2.add(0).cast::<*mut u8>() = ptr5.cast_mut();
ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_parse_fn<T: Guest>(arg0: *mut u8,) {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(4).cast::<usize>();
  _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
  fn parse_fn(spec: ParseFnSpec,) -> ParseFnManifest;
}
#[doc(hidden)]

macro_rules! __export_world_fn_parsing_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "parse-fn"]
    unsafe extern "C" fn export_parse_fn(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_parse_fn_cabi::<$ty>(arg0, arg1)
    }
    #[export_name = "cabi_post_parse-fn"]
    unsafe extern "C" fn _post_return_parse_fn(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_parse_fn::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_fn_parsing_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 8]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
mod _rt {
  pub use alloc_crate::string::String;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_fn_parsing_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_fn_parsing_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_fn_parsing_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:l3:fn-build:fn-parsing:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 378] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf9\x01\x01A\x02\x01\
A\x0d\x01ks\x01r\x02\x07packages\x07subpath\0\x03\0\x11dependency-import\x03\0\x01\
\x01q\x01\x12package-dependency\x01\x02\0\x03\0\x0dmodule-import\x03\0\x03\x01r\x01\
\x0bproject-dirs\x03\0\x0dparse-fn-spec\x03\0\x05\x01r\x01\x04paths\x03\0\x0dfn-\
entrypoint\x03\0\x07\x01r\x01\x0aentrypoint\x08\x03\0\x11parse-fn-manifest\x03\0\
\x09\x01@\x01\x04spec\x06\0\x0a\x04\0\x08parse-fn\x01\x0b\x04\0\x16l3:fn-build/f\
n-parsing\x04\0\x0b\x10\x01\0\x0afn-parsing\x03\0\0\0G\x09producers\x01\x0cproce\
ssed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

